name: EmCMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: /run/current-system/sw/bin/emcmake /run/current-system/sw/bin/cmake -B /run/github-runner/engine/EmEngine/EmEngine/embuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=/run/current-system/sw/bin/ccache -DCMAKE_MAKE_PROGRAM=/run/current-system/sw/bin/ninja -GNinja 

    - name: Build
      # Build your program with the given configuration
      run: EM_CACHE=~/.emscripten_cache /run/current-system/sw/bin/cmake --build ${{github.workspace}}/embuild --config ${{env.BUILD_TYPE}}
    
#    - name: Deploy
#      run: |
#        rm /srv/http/* -rf
#        cp embuild/* /srv/http/ -r
      # Runs a single command using the runners shell
    - name: Copy build
      run: cp -r embuild/ build-ok
